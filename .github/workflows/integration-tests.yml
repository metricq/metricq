name: Integration tests

on: 
  push: {}
  repository_dispatch:
    types: [integration-test]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Generate docker compose config
        uses: cuchi/jinja2-action@v1.1.0
        with:
          template: tests/docker-compose-test.yml.j2
          output_file: tests/docker-compose-test.yml
          strict: true
          variables: |
            manager=${{ github.event.client_payload.manager_ref }}
            cxx=${{ github.event.client_payload.cxx_ref }}
      - name: start rabbitmq and couchdb server
        run: docker-compose -f tests/docker-compose-test.yml up -d rabbitmq-server couchdb-server couchdb-setup
      - name: Build the stack
        run: docker-compose -f tests/docker-compose-test.yml up -d
      - name: "Test 1: Setup config"
        run: "docker run --rm --network tests_metricq-network curlimages/curl:latest curl --retry-connrefused --retry 5 --retry-delay 10 -X PUT -H \"Content-Type: application/json\" http://admin:admin@couchdb-server:5984/config/source-dummy-test1 -d '{}'"
      - name: "Test 1: simple source test"
        run: docker-compose -f tests/docker-compose-test.yml run --rm metricq-cxx metricq-source-dummy -s amqp://admin:admin@rabbitmq-server/ --token source-dummy-test1 --metric "dummy.pets" --messages-per-chunk 10 --chunk-count 100
      - name: "Test 2: Setup config"
        run: "docker run --rm --network tests_metricq-network curlimages/curl:latest curl --retry-connrefused --retry 5 --retry-delay 10 -X PUT -H \"Content-Type: application/json\" http://admin:admin@couchdb-server:5984/config/source-dummy-test2 -d '{}'"
      - name: "Test 2: source and sink combined"
        run: |
          TEST_2_SINK_ID=$(docker-compose -f tests/docker-compose-test.yml run --rm --name "test_2_sink" -d metricq-cxx metricq-sink-dummy -s amqp://admin:admin@rabbitmq-server/ --count 11 --timeout 10 -m dummy.pets)
          echo "Test sink started! ID is $TEST_2_SINK_ID"
          docker-compose -f tests/docker-compose-test.yml run --rm --name "test_2_source" metricq-cxx metricq-source-dummy -s amqp://admin:admin@rabbitmq-server/ --token source-dummy-test2 --metric "dummy.pets" --messages-per-chunk 10 --chunk-count 10
          echo "Source run completed, checking for running sink"
          (docker ps | grep -q $TEST_2_SINK_ID) && docker attach --no-stdin $TEST_2_SINK_ID
          echo "Sink is done"
